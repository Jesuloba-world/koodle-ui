// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { LoginUserData, LoginUserResponse, LoginUserError, RefreshTokenData, RefreshTokenResponse, RefreshTokenError, ResendEmailVerificationOtpData, ResendEmailVerificationOtpResponse, ResendEmailVerificationOtpError, ResendResetPasswordOtpData, ResendResetPasswordOtpResponse, ResendResetPasswordOtpError, ResetPasswordData, ResetPasswordResponse, ResetPasswordError, SetPasswordForUserData, SetPasswordForUserResponse, SetPasswordForUserError, StartResetPasswordData, StartResetPasswordResponse, StartResetPasswordError, StartSignupProcessData, StartSignupProcessResponse, StartSignupProcessError, VerifyEmailAddressWithOtpData, VerifyEmailAddressWithOtpResponse, VerifyEmailAddressWithOtpError, VerifyResetPasswordOtpData, VerifyResetPasswordOtpResponse, VerifyResetPasswordOtpError, CreateBoardData, CreateBoardResponse, CreateBoardError, GetAllMyBoardsData, GetAllMyBoardsResponse, GetAllMyBoardsError, DeleteBoardData, DeleteBoardResponse, DeleteBoardError, GetBoardData, GetBoardResponse, GetBoardError, UpdateBoardData, UpdateBoardResponse, UpdateBoardError } from './types.gen';

export const client = createClient(createConfig());

export const loginUser = <ThrowOnError extends boolean = false>(options: Options<LoginUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginUserResponse, LoginUserError, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const refreshToken = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<RefreshTokenResponse, RefreshTokenError, ThrowOnError>({
        url: '/auth/refreshtoken',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const resendEmailVerificationOtp = <ThrowOnError extends boolean = false>(options: Options<ResendEmailVerificationOtpData, ThrowOnError>) => {
    return (options?.client ?? client).post<ResendEmailVerificationOtpResponse, ResendEmailVerificationOtpError, ThrowOnError>({
        url: '/auth/resendemailverificationotp',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const resendResetPasswordOtp = <ThrowOnError extends boolean = false>(options: Options<ResendResetPasswordOtpData, ThrowOnError>) => {
    return (options?.client ?? client).post<ResendResetPasswordOtpResponse, ResendResetPasswordOtpError, ThrowOnError>({
        url: '/auth/resendresetpasswordotp',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError, ThrowOnError>({
        url: '/auth/resetpassword',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const setPasswordForUser = <ThrowOnError extends boolean = false>(options: Options<SetPasswordForUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetPasswordForUserResponse, SetPasswordForUserError, ThrowOnError>({
        url: '/auth/setPassword',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const startResetPassword = <ThrowOnError extends boolean = false>(options: Options<StartResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<StartResetPasswordResponse, StartResetPasswordError, ThrowOnError>({
        url: '/auth/startresetpassword',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const startSignupProcess = <ThrowOnError extends boolean = false>(options: Options<StartSignupProcessData, ThrowOnError>) => {
    return (options?.client ?? client).post<StartSignupProcessResponse, StartSignupProcessError, ThrowOnError>({
        url: '/auth/startsignup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const verifyEmailAddressWithOtp = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailAddressWithOtpData, ThrowOnError>) => {
    return (options?.client ?? client).post<VerifyEmailAddressWithOtpResponse, VerifyEmailAddressWithOtpError, ThrowOnError>({
        url: '/auth/verifyemail',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const verifyResetPasswordOtp = <ThrowOnError extends boolean = false>(options: Options<VerifyResetPasswordOtpData, ThrowOnError>) => {
    return (options?.client ?? client).post<VerifyResetPasswordOtpResponse, VerifyResetPasswordOtpError, ThrowOnError>({
        url: '/auth/verifyresetpasswordotp',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createBoard = <ThrowOnError extends boolean = false>(options: Options<CreateBoardData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateBoardResponse, CreateBoardError, ThrowOnError>({
        url: '/boards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllMyBoards = <ThrowOnError extends boolean = false>(options?: Options<GetAllMyBoardsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllMyBoardsResponse, GetAllMyBoardsError, ThrowOnError>({
        url: '/boards/mine',
        ...options
    });
};

export const deleteBoard = <ThrowOnError extends boolean = false>(options: Options<DeleteBoardData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteBoardResponse, DeleteBoardError, ThrowOnError>({
        url: '/boards/{boardId}',
        ...options
    });
};

export const getBoard = <ThrowOnError extends boolean = false>(options: Options<GetBoardData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBoardResponse, GetBoardError, ThrowOnError>({
        url: '/boards/{boardId}',
        ...options
    });
};

export const updateBoard = <ThrowOnError extends boolean = false>(options: Options<UpdateBoardData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateBoardResponse, UpdateBoardError, ThrowOnError>({
        url: '/boards/{boardId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};