// This file is auto-generated by @hey-api/openapi-ts

export type Board = {
    columns: Array<Column> | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
};

export type BoardInput = {
    /**
     * Columns of board
     */
    columns: Array<ColumnInput> | null;
    /**
     * Name of board
     */
    name: string;
};

export type BoardObject = {
    /**
     * Time board was created
     */
    createdAt: string;
    /**
     * ID of board
     */
    id: string;
    /**
     * Name of board
     */
    name: string;
    /**
     * Time board was last updated
     */
    updatedAt: string;
};

export type Column = {
    color: string;
    createdAt: string;
    id: string;
    name: string;
    position: number;
    tasks: Array<Task> | null;
    updatedAt: string;
};

export type ColumnInput = {
    /**
     * ID of column (empty for new columns)
     */
    id?: string;
    /**
     * Name of column
     */
    name: string;
};

export type CreateBoardReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Board to create
     */
    board: BoardInput;
};

export type CreateBoardRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Created board
     */
    board: BoardObject;
    message: string;
};

export type DeleteBoardRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type GetAllBoardsRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * List of boards
     */
    boards: Array<BoardObject> | null;
};

export type GetBoardRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * The full Board object
     */
    board: Board;
};

export type LoginReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * email of user
     */
    email: string;
    /**
     * password of user
     */
    password: string;
};

export type LoginRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * the accesstoken for authentication
     */
    accesstoken: string;
    message: string;
    /**
     * the refreshtoken to refresh access
     */
    refreshtoken: string;
    /**
     * the user object
     */
    user: UserResponse;
};

export type RefreshTokenReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * the previous refreshtoken to refresh access
     */
    refreshtoken: string;
};

export type RefreshTokenRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * the accesstoken for authentication
     */
    accesstoken: string;
    message: string;
    /**
     * the refreshtoken to refresh access
     */
    refreshtoken: string;
};

export type ResendEmailVerificationOtpReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * resend otp to email
     */
    email: string;
};

export type ResendEmailVerificationOtpRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type ResendResetPasswordOtpReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * email of user, otp will be sent to this email
     */
    email: string;
};

export type ResendResetPasswordOtpRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type ResetPasswordReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * email of user
     */
    email: string;
    /**
     * otp sent to email
     */
    otp: string;
    /**
     * new password of user
     */
    password: string;
};

export type ResetPasswordRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type SetPasswordReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * email of user
     */
    email: string;
    /**
     * otp sent to email
     */
    otp: string;
    /**
     * new password of user
     */
    password: string;
};

export type SetPasswordRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * the accesstoken for authentication
     */
    accesstoken: string;
    message: string;
    /**
     * the refreshtoken to refresh access
     */
    refreshtoken: string;
    /**
     * the user object
     */
    user: UserResponse;
};

export type StartResetPasswordReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * email of user, otp will be sent to this email
     */
    email: string;
};

export type StartResetPasswordRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type StartSignUpReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * email of new user, otp will be sent to this email for verification
     */
    email: string;
};

export type StartSignUpRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type Subtask = {
    CreatedAt: string;
    ID: string;
    IsCompleted: boolean;
    Name: string;
    TaskID: string;
    UpdatedAt: string;
};

export type Task = {
    ColumnID: string;
    CreatedAt: string;
    Description: string;
    ID: string;
    Position: number;
    Subtasks: Array<Subtask> | null;
    Title: string;
    UpdatedAt: string;
};

export type UpdateBoardReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Board to update
     */
    board: BoardInput;
};

export type UpdateBoardRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Updated board
     */
    board: BoardObject;
    message: string;
};

export type UserResponse = {
    /**
     * Time user was created
     */
    created_at: string;
    /**
     * Email address of user
     */
    email: string;
    /**
     * Whether user's email is verified
     */
    email_verified: boolean;
    /**
     * ID of user
     */
    id: string;
    /**
     * Time user was last updated
     */
    updated_at: string;
};

export type VerifyEmailReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * email of user
     */
    email: string;
    /**
     * otp sent to email
     */
    otp: string;
};

export type VerifyEmailRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type VerifyResetPasswordOtpReqBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * email of user
     */
    email: string;
    /**
     * otp sent to email
     */
    otp: string;
};

export type VerifyResetPasswordOtpRespBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type LoginUserData = {
    body: LoginReqBody;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginUserErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type LoginUserError = LoginUserErrors[keyof LoginUserErrors];

export type LoginUserResponses = {
    /**
     * OK
     */
    200: LoginRespBody;
};

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses];

export type RefreshTokenData = {
    body: RefreshTokenReqBody;
    path?: never;
    query?: never;
    url: '/auth/refreshtoken';
};

export type RefreshTokenErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type RefreshTokenError = RefreshTokenErrors[keyof RefreshTokenErrors];

export type RefreshTokenResponses = {
    /**
     * OK
     */
    200: RefreshTokenRespBody;
};

export type RefreshTokenResponse = RefreshTokenResponses[keyof RefreshTokenResponses];

export type ResendEmailVerificationOtpData = {
    body: ResendEmailVerificationOtpReqBody;
    path?: never;
    query?: never;
    url: '/auth/resendemailverificationotp';
};

export type ResendEmailVerificationOtpErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type ResendEmailVerificationOtpError = ResendEmailVerificationOtpErrors[keyof ResendEmailVerificationOtpErrors];

export type ResendEmailVerificationOtpResponses = {
    /**
     * OK
     */
    200: ResendEmailVerificationOtpRespBody;
};

export type ResendEmailVerificationOtpResponse = ResendEmailVerificationOtpResponses[keyof ResendEmailVerificationOtpResponses];

export type ResendResetPasswordOtpData = {
    body: ResendResetPasswordOtpReqBody;
    path?: never;
    query?: never;
    url: '/auth/resendresetpasswordotp';
};

export type ResendResetPasswordOtpErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type ResendResetPasswordOtpError = ResendResetPasswordOtpErrors[keyof ResendResetPasswordOtpErrors];

export type ResendResetPasswordOtpResponses = {
    /**
     * OK
     */
    200: ResendResetPasswordOtpRespBody;
};

export type ResendResetPasswordOtpResponse = ResendResetPasswordOtpResponses[keyof ResendResetPasswordOtpResponses];

export type ResetPasswordData = {
    body: ResetPasswordReqBody;
    path?: never;
    query?: never;
    url: '/auth/resetpassword';
};

export type ResetPasswordErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type ResetPasswordError = ResetPasswordErrors[keyof ResetPasswordErrors];

export type ResetPasswordResponses = {
    /**
     * OK
     */
    200: ResetPasswordRespBody;
};

export type ResetPasswordResponse = ResetPasswordResponses[keyof ResetPasswordResponses];

export type SetPasswordForUserData = {
    body: SetPasswordReqBody;
    path?: never;
    query?: never;
    url: '/auth/setPassword';
};

export type SetPasswordForUserErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type SetPasswordForUserError = SetPasswordForUserErrors[keyof SetPasswordForUserErrors];

export type SetPasswordForUserResponses = {
    /**
     * OK
     */
    200: SetPasswordRespBody;
};

export type SetPasswordForUserResponse = SetPasswordForUserResponses[keyof SetPasswordForUserResponses];

export type StartResetPasswordData = {
    body: StartResetPasswordReqBody;
    path?: never;
    query?: never;
    url: '/auth/startresetpassword';
};

export type StartResetPasswordErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type StartResetPasswordError = StartResetPasswordErrors[keyof StartResetPasswordErrors];

export type StartResetPasswordResponses = {
    /**
     * OK
     */
    200: StartResetPasswordRespBody;
};

export type StartResetPasswordResponse = StartResetPasswordResponses[keyof StartResetPasswordResponses];

export type StartSignupProcessData = {
    body: StartSignUpReqBody;
    path?: never;
    query?: never;
    url: '/auth/startsignup';
};

export type StartSignupProcessErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type StartSignupProcessError = StartSignupProcessErrors[keyof StartSignupProcessErrors];

export type StartSignupProcessResponses = {
    /**
     * OK
     */
    200: StartSignUpRespBody;
};

export type StartSignupProcessResponse = StartSignupProcessResponses[keyof StartSignupProcessResponses];

export type VerifyEmailAddressWithOtpData = {
    body: VerifyEmailReqBody;
    path?: never;
    query?: never;
    url: '/auth/verifyemail';
};

export type VerifyEmailAddressWithOtpErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type VerifyEmailAddressWithOtpError = VerifyEmailAddressWithOtpErrors[keyof VerifyEmailAddressWithOtpErrors];

export type VerifyEmailAddressWithOtpResponses = {
    /**
     * OK
     */
    200: VerifyEmailRespBody;
};

export type VerifyEmailAddressWithOtpResponse = VerifyEmailAddressWithOtpResponses[keyof VerifyEmailAddressWithOtpResponses];

export type VerifyResetPasswordOtpData = {
    body: VerifyResetPasswordOtpReqBody;
    path?: never;
    query?: never;
    url: '/auth/verifyresetpasswordotp';
};

export type VerifyResetPasswordOtpErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type VerifyResetPasswordOtpError = VerifyResetPasswordOtpErrors[keyof VerifyResetPasswordOtpErrors];

export type VerifyResetPasswordOtpResponses = {
    /**
     * OK
     */
    200: VerifyResetPasswordOtpRespBody;
};

export type VerifyResetPasswordOtpResponse = VerifyResetPasswordOtpResponses[keyof VerifyResetPasswordOtpResponses];

export type CreateBoardData = {
    body: CreateBoardReqBody;
    path?: never;
    query?: never;
    url: '/boards';
};

export type CreateBoardErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type CreateBoardError = CreateBoardErrors[keyof CreateBoardErrors];

export type CreateBoardResponses = {
    /**
     * OK
     */
    200: CreateBoardRespBody;
};

export type CreateBoardResponse = CreateBoardResponses[keyof CreateBoardResponses];

export type GetAllMyBoardsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/boards/mine';
};

export type GetAllMyBoardsErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type GetAllMyBoardsError = GetAllMyBoardsErrors[keyof GetAllMyBoardsErrors];

export type GetAllMyBoardsResponses = {
    /**
     * OK
     */
    200: GetAllBoardsRespBody;
};

export type GetAllMyBoardsResponse = GetAllMyBoardsResponses[keyof GetAllMyBoardsResponses];

export type DeleteBoardData = {
    body?: never;
    path: {
        /**
         * ID of board
         */
        boardId: string;
    };
    query?: never;
    url: '/boards/{boardId}';
};

export type DeleteBoardErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type DeleteBoardError = DeleteBoardErrors[keyof DeleteBoardErrors];

export type DeleteBoardResponses = {
    /**
     * OK
     */
    200: DeleteBoardRespBody;
};

export type DeleteBoardResponse = DeleteBoardResponses[keyof DeleteBoardResponses];

export type GetBoardData = {
    body?: never;
    headers?: {
        /**
         * Bearer [token]
         */
        Authorization?: string;
    };
    path: {
        /**
         * ID of board
         */
        boardId: string;
    };
    query?: {
        /**
         * Whether to include tasks in the board response
         */
        include_task?: boolean;
    };
    url: '/boards/{boardId}';
};

export type GetBoardErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type GetBoardError = GetBoardErrors[keyof GetBoardErrors];

export type GetBoardResponses = {
    /**
     * OK
     */
    200: GetBoardRespBody;
};

export type GetBoardResponse = GetBoardResponses[keyof GetBoardResponses];

export type UpdateBoardData = {
    body: UpdateBoardReqBody;
    path: {
        /**
         * ID of board
         */
        boardId: string;
    };
    query?: never;
    url: '/boards/{boardId}';
};

export type UpdateBoardErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type UpdateBoardError = UpdateBoardErrors[keyof UpdateBoardErrors];

export type UpdateBoardResponses = {
    /**
     * OK
     */
    200: UpdateBoardRespBody;
};

export type UpdateBoardResponse = UpdateBoardResponses[keyof UpdateBoardResponses];